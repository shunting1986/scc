  TODO: support dump mongoose.c from tree back to C

	TODO: current goal is fully pass global-initializer
	
	TODO: next step is mongoose !!
	  DONE. manual build mongoose using gcc
	  DONE: 2.1 compile main.c to .s 

		2.2 compile mongoose.c to .s
	  3. assemble .s to .o
	  4. link
	  5. run

NOTE:
	TODO: consider type when do operation
	1. ptr + integer
	2. ptr - ptr
	3. assign
	4. type conversion
	5. type check when assign / make func call

  the scope of struct/union/enum/typedef/func is similar to variable. When we exit a brace, these definitions are gone as well.
	struct union, enum share a name space; typedef, func, var share one. 
	func is special. 1. it can have multiple declaration in one scope; 2. inner scope can not have different specification to outer one

	TODO: support function declaration

  TODO: how to handle the case that different function in one translation unit can define label with the same name?
	TODO: switch (and break inside switch), break, continue
	TODO: support struct initializer
	TODO: array + struct

TODO: change array and func type to ptr automatically

TODO: support va args
- NOTE: the only external resource I refer is the grammar of C language
- TODO: let the make file support dependency on header file
NOTE: we can try to compile mongoose/memcached/ITSELF!! with my compiler :)
need distinguish declarator and abstract_declarator <== parse these 2 at the same time
TODO: type conversion/check?

TODO: handle local typedef and local extern (don't alloc storage for them)
TODO: support static local variable

=========== EXTRA

Compiler optimization
1. copy duplication

TODO: complete type system; I'd better extract the pure type out of syntax tree (this is partial done)
TODO: n-queen (the code is about 3 times slower than the one generated by GCC. I'd like to optimize the compiler :))
TODO: how to reclaim the memory for 'type' object (may use reference cnt)
TODO: analyze memleak
TODO: use stack to store temporary right now. Need implement advanced register allocation algorithms
TODO: make the compiler support both 32 bit and 64 bit asm?
TODO: floating point

TODO: remove the dependency of the include file search path on GCC installation


TODO: syntax
- abstract declarator
- avoid allocate space for typedef
- avoid interp the expression inside sizeof (e.g. ++)

========== DONE
- translate sample.c back to C
- translate sample.c to asm (32 bit)
- support 
	+ for, while, do-while, if, break loop, continue, (recursive) function call
	+ && || short cut, global variable, one & multi dim array, 
	+ one & multi dim pointer, automatically add trailing return statement, 
	+ typedef, reference count mechanism for type structure, conditional expr
	+ obj & func macro
	+ cond compiling
	+ struct/union definition and dot, ptr operation
	+ support include "stdio.h"
- support insertion sort, bubble sort, nqueen
- a simple integration test framework

- DONE: try out cgasm_emit_abort ...
