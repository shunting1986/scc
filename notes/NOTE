  DONE: support insertion sort
	DONE: support one dimension array by global var

	TODO: allocate the correct space to the global array !!!!
	1. when register the symbol, also register the type (take care of array)
	2. refer to the type when dump global var.

KEYLIST
  TODO: support local one dimension array
	TODO: support multip-dimen array
	TODO: support pointer..

	TODO: how to reclaim the memory for 'type' object

  TODO: array def & use (multi-dimen), matrix multi <== 
	      think about the difference between array and pointer

	TODO: n-queen
	TODO: type system; I'd better extract the pure type out of syntax tree
	TODO: typedef
	TODO: auto add ret instruction
	TODO: type conversion?
	TODO: switch, struct def & dot & ptr, general pointer, break, continue
  TODO: support preprocessor
	TODO: support initializer

TODO: make the compiler support both 32 bit and 64 bit asm?

- NOTE: the only external resource I refer is the grammar of C language
- NOTE: use stack to store temporary right now. Need implement advanced register allocation algorithms
- TODO: let the make file support dependency on header file

NOTE: we can try to compile mongoose/memcached/ITSELF!! with my compiler :)

need distinguish declarator and abstract_declarator <== parse these 2 at the same time

TODO: analyze memleak

Compiler optimization
1. copy duplication

========== DONE
- translate sample.c back to C
- translate sample.c to asm (32 bit)
- support for, while, if, (recursive) function call, && || short cut, global variable
- a simple integration test framework
