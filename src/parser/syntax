external_declaration: function_definition
	| declaration;

function_definition: declaration_specifiers declarator compound_statement ;

declaration: declaration_specifiers init_declarator_list;

init_declarator_list: init_declarator
	| init_declarator_list ',' init_declarator
	;

init_declarator: declarator
	| declarator '=' initializer
	;

compound_statement
  : '{' '}'
	| '{' statement_list '}'
	| '{' declaration_list '}'
	| '{' declaration_list statement_list '}'
	;

iteration_statement
	: WHILE '(' expression ')' statement
	| DO statement WHILE '( expression ')' ';'
	| FOR '(' expression_statement expression_statement ')' statement
	| FOR '(' expression_statement expression_statement ')' statement
	;

jump_statement
	: GOTO IDENTIFIER ';'
	| CONTINUE ';'
	| BREAK ';'
	| RETURN ';'
	| RETURN expression ';'
	;

selection_statement
	: IF '(' expression ')' statement
	| IF '(' expression ')' statement ELSE statement
	| SWITCH '(' expression ')' statement
	;

labeled_statement
	: IDENTIFIER ':' statement
	| CASE constant_expression ':' statement
	| DEFAULT ':' statement
	;

declaration_specifiers 
  : storage_class_specifier
	| storage_class_specifier declaration_specifiers
	| type_specifier
	| type_specifier declaration_specifiers
	| type_qualifier 
	| type_qualifier declaration_specifiers
	;

declarator
  : direct_declarator
	| pointer direct_declarator;

direct_declarator
  : IDENTIFIER
	| '(' declarator ')'
	| direct_declarator '[' constant_expression ']'
	| direct_declarator '[' ']'
	| direct_declarator '(' parameter_type_list ')'
	| direct_declarator '(' ')'
	;

type_name
  : specifier_qualifier_list
	| specifier_qualifier_list abstract_declarator
	;

cast_expression
  : unary_expression
	| '(' type_name ')' cast_expression
	;

assignment_expression
  : conditional_expression
	| unary_expression assignment_operator assignment_expression
	;

expression
	: assignment_expression
	| expression ',' assignment_expression

expression_statement
	: ';'
	| expression ';'
	;

statement
	: compound_statement
	| expression_statement
	| iteration_statement
	| selection_statement
	| jump_statement
	| labeled_statement
	;

